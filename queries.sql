-- 1 Find the total number of orders for each customer. 

-- SELECT 
-- os.customer_id,
-- COUNT(*) AS total_orders
-- FROM orders AS os
-- INNER JOIN customers AS cu
-- ON os.customer_id = cu.customer_id
-- GROUP BY os.customer_id
-- ORDER BY os.customer_id



-- 2 Identify customers who placed orders but have not made payments. 


-- SELECT 
-- cu.customer_id,
-- name,
-- os.order_id,
-- payment_id,
-- payment_date
-- FROM customers AS cu
-- LEFT JOIN orders AS os
-- ON cu.customer_id = os.customer_id
-- LEFT JOIN payments AS ps
-- ON os.order_id = ps.order_id
-- WHERE payment_id IS NULL





-- 3 Retrieve the top 5 highest revenue-generating products.



-- SELECT 
-- name,
-- COUNT(quantity) * ps.price AS total_revenue
-- FROM products AS ps
-- INNER JOIN order_items AS oi
-- ON ps.product_id = oi.product_id
-- GROUP BY name, ps.price
-- ORDER BY COUNT(quantity) * ps.price DESC
-- LIMIT 5






-- 4 Show the total revenue generated by each category.


-- SELECT 
-- category,
-- SUM(ps.price * oi.quantity) AS total_revenue
-- FROM order_items AS oi
-- LEFT JOIN products AS ps
-- ON ps.product_id = oi.product_id
-- LEFT JOIN orders AS os
-- ON os.order_id = oi.order_id
-- GROUP BY category






-- 5 Find the employees who do not have a manager assigned. 

-- SELECT 
-- name
-- FROM employees
-- WHERE manager_id IS NULL



-- 6 List all products that have never been ordered. 


-- SELECT 
-- name
-- FROM products AS ps
-- LEFT JOIN order_items AS oi
-- ON ps.product_id = oi.product_id
-- WHERE order_id IS NULL




-- 7 Identify customers who have placed more than 3 orders. 



-- SELECT 
-- name,
-- COUNT(*) AS total_orders
-- FROM customers AS cu
-- INNER JOIN orders AS os
-- ON cu.customer_id = os.customer_id
-- GROUP BY cu.customer_id
-- HAVING COUNT(*) > 3






-- 8 Find the employee with the highest salary. 


-- SELECT 
-- name,
-- MAX(salary) AS salary
-- FROM employees
-- GROUP BY name
-- LIMIT 1





-- 9  Retrieve a list of all customers and employees together in one column. 


-- SELECT 
-- name
-- FROM customers
-- UNION
-- SELECT 
-- name
-- FROM employees





-- 10 Get the second highest order total amount. 

-- SELECT 
-- name,
-- COUNT(quantity) * ps.price AS total_revenue
-- FROM products AS ps
-- INNER JOIN order_items AS oi
-- ON ps.product_id = oi.product_id
-- GROUP BY name, ps.price
-- ORDER BY COUNT(quantity) * ps.price DESC
-- LIMIT 1 OFFSET 1




